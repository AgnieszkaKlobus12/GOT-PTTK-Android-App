package com.example.poapp.model

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.poapp.model.dao.*
import com.example.poapp.model.entity.*
import kotlinx.coroutines.*

@Database(
    entities = [Uzytkownik::class, Dowod::class, DowodOdcinka::class, MountainGroup::class, MountainPassOfficial::class, OdcinekTrasy::class, OdcinekWlasny::class, Odznaka::class, MountainRange::class, Pracownik::class, Przodownik::class, OfficialPoint::class, PunktWlasny::class, Trasa::class, Turysta::class, UprawnieniaPrzodownika::class],
    version = 7
)
abstract class AppDatabase : RoomDatabase() {

    abstract fun userDAO(): UserDAO
    abstract fun touristDAO(): TouristDAO
    abstract fun routeDAO(): RouteDAO
    abstract fun mountainPassDAO(): MountainPassDAO
    abstract fun geoPointDAO(): OfficialPointDAO
    abstract fun routeSectionDAO(): RouteSectionDAO
    abstract fun mountainGroupDAO(): MountainGroupDAO
    abstract fun mountainRangeDAO(): MountainRangeDAO

    @DelicateCoroutinesApi
    companion object {
        private var INSTANCE: AppDatabase? = null

        @Synchronized
        fun getInstance(ctx: Context): AppDatabase {
            if (INSTANCE == null)
                INSTANCE = Room.databaseBuilder(
                    ctx.applicationContext, AppDatabase::class.java,
                    "app_database"
                )
                    .fallbackToDestructiveMigration()
                    .addCallback(roomCallback)
                    .allowMainThreadQueries()
                    .build()
            return INSTANCE!!
        }

        private val roomCallback = object : Callback() {
            override fun onCreate(db: SupportSQLiteDatabase) {
                super.onCreate(db)
                GlobalScope.launch(Dispatchers.IO) {
                    populateDatabase(INSTANCE!!)
                }
            }

            private suspend fun populateDatabase(db: AppDatabase) {
                db.let { db ->
                    withContext(Dispatchers.IO) {
                        val mountainGroupDAO = db.mountainGroupDAO()

                        //every table needs to be cleared to avoid redundant data
                        mountainGroupDAO.deleteAll()

                        //id is autogenerated so when creating object it can be always 0
                        mountainGroupDAO.insert(
                            MountainGroup(
                                0,
                                "Tatry",
                                "Polska",
                                byteArrayOf()
                            )
                        )
                    }
                }
            }
        }
    }
}